openapi: "3.0.1"
info:
  title: "API Products"
  version: "1.0.0"
paths:
  /api/products:
    get:
      summary: Obtains paginated products
      description: Retrieves a paginated list of products.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            description: Maximum number of products to return per page.
        - in: query
          name: page
          schema:
            type: integer
            description: Page number.
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            description: Sort products by price in ascending or descending order.
        - in: query
          name: query
          schema:
            type: string
            description: Search for products by title or category.
      tags:
        - Products
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                type: object
                properties:
                  docs:
                    type: array
                    items:
                      $ref: "#components/schemas/Products"
                  totalDocs:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                  page:
                    type: integer
                  pagingCounter:
                    type: integer
                  hasPrevPage:
                    type: boolean
                  hasNextPage:
                    type: boolean
                  prevPage:
                    type: integer
                  nextPage:
                    type: integer
                required:
                  - docs
                  - totalDocs
                  - limit
                  - totalPages
                  - page
                  - pagingCounter
                  - hasPrevPage
                  - hasNextPage
                  - prevPage
                  - nextPage
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /api/products/{pid}:
    get:
      summary: Obtains a product by its ID
      description: Retrieves a specific product by its ID.
      parameters:
        - in: path
          name: pid
          required: true
          schema:
            type: string
            description: ID of the product to retrieve.
      tags:
        - Products
      responses:
        "200":
          description: Product found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: "#components/schemas/Products"
        "404":
          description: Product not found.
          content: 
            application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Product not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /api/products:
    post:
      summary: Create a new product
      description: Creates a new product in the database.
      tags:
        - Products
      security: 
        - jwt: []
        - authorizedRole:
          - admin
          - premium
      requestBody:
        required: true
        content:
          application/json:
            schema:
            type: object
            properties:
              title:
                type: string
                description: Title of the product.
              description:
                type: string
                description: Description of the product.
              code:
                type: string
                description: Unique code of the product.
              price:
                type: number
                description: Price of the product.
              status:
                type: boolean
                description: Status of the product (available or not).
              stock:
                type: integer
                description: Quantity in stock of the product.
              category:
                type: string
                description: Category of the product.
            required:
              - title
              - description
              - code
              - price
              - status
              - stock
              - category
      responses:
        "201":
          description: Product created successfully
          content:
          application/json:
            example:
              _id: ObjectId("378fghg234g8ddd23aas")
              title: "Example Product"
              description: "This is an example product."
              code: "HFE984"
              price: 99
              status: true
              stock: 100
              category: "example category"
              thumbnails: ["thumbnail1.jpg", "thumbnail2.jpg"]
              isVisible: true
              owner: "user@example.com"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bad request
        "403":
          description: Unauthorized role
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access denied 
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /api/products/{pid}:
    put:
      summary: Update a product
      description: Updates a product by its ID.
      tags:
        - Products
      security: 
        - jwt: []
        - authorizedRole:
          - admin
          - premium
      parameters:
        - in: path
          name: pid
          required: true
          schema:
            type: string
            description: ID of the product to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Product'
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Product'
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Error updating product

  /api/products/{pid}:
    delete:
      summary: Delete a product
      description: Deletes a product by its ID.
      tags:
        - Products
      security: 
        - jwt: []
        - authorizedRole:
            - admin
            - premium
      parameters:
        - in: path
          name: pid
          required: true
          schema:
            type: string
            description: ID of the product to delete.
      responses:
        "204":
          description: Product deleted successfully
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Error deleting product

components:
  schemas:
    Products:
      type: object
      properties:
        _id:
          type: string
          description: ID generated by MongoDB.
        title:
          type: string
          description: Product title.
        description:
          type: string
          description: Product description.
        code:
          type: string
          description: Product unique code.
        price:
          type: number
          description: Product price.
        status:
          type: boolean
          description: Product status.
        stock:
          type: number
          description: Product stock.
        category:
          type: string
          description: Product category.
        thumbnails:
          type: array
          items:
            type: string
          description: Product images.
        isVisible:
          type: boolean
          description: Shows if the product is visible or not.
        owner: 
          type: string
          description: Owner of the product (user email).
      example:
        _id: ObjectId("453537u92h97fb92absaaf")
        title: Notebook Asus 501
        description: Description of Notebook Asus 501
        code: DFSA5431
        price: 248000
        status: true
        stock: 24
        category: notebooks
        thumbnails: ["thumbnail1.jpg", "thumbnail2.jpg"]
        isVisible: true
        owner: user@example.com
